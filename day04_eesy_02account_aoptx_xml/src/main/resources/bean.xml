<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd">

    <!-- 配置Service -->
    <bean id="accountService" class="com.itheima.service.impl.AccountServiceImpl">
        <!-- 注入dao -->
        <property name="accountDao" ref="accountDao"></property>
    </bean>

    <!-- 配置通知Bean TransactionManager类（事务管理器）-->
    <bean name="transactionManager" class="com.itheima.utils.TransactionManager">
        <property name="connectionUtils" ref="connectionUtils"></property>
    </bean>

    <!-- 配置AOP -->
    <aop:config>
        <!-- 配置切入点表达式 -->
        <aop:pointcut id="pt1" expression="execution(* com.itheima.service.impl.*.*(..))"></aop:pointcut>
        <!-- 配置切面 -->
        <aop:aspect id="transactionManagerAdvice" ref="transactionManager">
            <!-- 配置通知类型，将通知方法和切入点方法进行关联 -->

            <!--&lt;!&ndash; 前置通知 &ndash;&gt;
            <aop:before method="beginTransaction" pointcut-ref="pt1"></aop:before>

            &lt;!&ndash; 后置通知 &ndash;&gt;
            <aop:after-returning method="commitTransaction" pointcut-ref="pt1"></aop:after-returning>

            &lt;!&ndash; 异常通知 &ndash;&gt;
            <aop:after-throwing method="rollbackTransaction" pointcut-ref="pt1"></aop:after-throwing>

            &lt;!&ndash; 最终通知 &ndash;&gt;
            <aop:after method="release" pointcut-ref="pt1"></aop:after>-->

            <!-- 环绕通知 -->
            <aop:around method="aroundTransaction" pointcut-ref="pt1"></aop:around>
        </aop:aspect>
    </aop:config>



    <!-- 配置dao -->
    <bean id="accountDao" class="com.itheima.dao.impl.AccountDaoImpl">
        <!-- 注入QueryRunner -->
        <property name="queryRunner" ref="queryRunner"></property>
        <!-- 注入ConnectionUtils -->
        <property name="connectionUtils" ref="connectionUtils"></property>
    </bean>

    <!-- 配置QueryRunner -->
    <bean id="queryRunner" class="org.apache.commons.dbutils.QueryRunner" scope="prototype">
                                                        <!-- 注意：这里需要将QueryRunner对象配置为多例对象，否则会有线程干扰问题
                                                                    试想：当有多个dao在使用QueryRunner对象时，如果一个dao已经用完了QueryRunner对象，
                                                                            而其它dao还没有用完QueryRunner对象，这时就会出现线程干扰问题
                                                                    如果配置成多例对象，那么每个dao在使用QueryRunner对象时，
                                                                        都是新创建的QueryRunner对象，就不会出现线程干扰问题
                                                        -->
        <!--&lt;!&ndash; 注入数据源 &ndash;&gt;  &lt;!&ndash; 注入数据源以后，每次使用QueryRunner对象时，都会获取一个新的连接 &ndash;&gt;
        <constructor-arg name="ds" ref="dataSource"></constructor-arg>-->
    </bean>

    <!-- 配置数据源 -->
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <!-- 注入连接数据库的必备信息 -->
        <property name="driverClass" value="com.mysql.jdbc.Driver"></property>
        <property name="jdbcUrl" value="jdbc:mysql://localhost:3306/eesy?characterEncoding=utf8&amp;useSSL=false"></property>
        <property name="user" value="root"></property>
        <property name="password" value="root"></property>
    </bean>

    <!-- 配置Connection的工具类 ConnectionUtils -->
    <bean id="connectionUtils" class="com.itheima.utils.ConnectionUtils">
        <!-- 注入数据源 -->
        <property name="dataSource" ref="dataSource"></property>
    </bean>


</beans>
