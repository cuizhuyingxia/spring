<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd">

    <!-- 配置spring的Ioc，把Service对象配置进来 -->
    <bean id="accountService" class="com.itheima.service.impl.AccountServiceImpl"></bean>

    <!-- 配日志通知Bean Logger类 -->
    <bean id="logger" class="com.itheima.utils.Logger"></bean>

    <!-- 配置Aop -->
    <aop:config>
        <!-- 配置切入点表达式
                    id属性用于指定表达式的唯一标识    expression属性用于指定表达式内容
                    此标签如果写在aop:aspect标签内部，则只能供当前切面使用
                    如果写在aop:aspect标签前面，则可以供所有切面使用
            -->
        <aop:pointcut id="pt1" expression="execution(* com.itheima.service.impl.*.*(..))"></aop:pointcut>
        <!-- 配置切面 -->
        <aop:aspect id="logAdvice" ref="logger">
            <!-- 配置通知类型，将通知方法和切入点方法进行关联 -->

            <!--&lt;!&ndash; 前置通知：在切入点方法执行之前执行 &ndash;&gt;
            <aop:before method="beforePrintLog" pointcut-ref="pt1"></aop:before>

            &lt;!&ndash; 后置通知：在切入点方法正常执行之后执行，它和异常通知永远只能执行一个 &ndash;&gt;
            <aop:after-returning method="afterReturningPrintLog" pointcut-ref="pt1"></aop:after-returning>

            &lt;!&ndash; 异常通知：在切入点方法执行产生异常之后执行，它和后置通知永远只能执行一个 &ndash;&gt;
            <aop:after-throwing method="afterThrowingPrintLog" pointcut-ref="pt1"></aop:after-throwing>

            &lt;!&ndash; 最终通知：无论切入点方法是否正常执行，它都会在其后执行 &ndash;&gt;
            <aop:after method="afterPrintLog" pointcut-ref="pt1"></aop:after>-->

            <!-- 配置环绕通知 详细的注释请看Logger类中 -->
            <aop:around method="aroundPrintLog" pointcut-ref="pt1"></aop:around>
        </aop:aspect>
    </aop:config>

</beans>