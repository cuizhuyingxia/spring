<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd">

    <!-- 配置spring的Ioc，把Service对象配置进来 -->
    <bean id="accountService" class="com.itheima.service.impl.AccountServiceImpl"></bean>

    <!-- spring中基于xml的AOP配置步骤
            1. 把通知Bean也配置到Ioc中
            2. 使用aop:config标签表名开始AOP配置
            3. 使用aop:aspect标签表明开始切面配置
                id属性：给切面提供一个唯一的标识
                ref属性：指定通知Bean的id
            4. 在aop:aspect标签的内部使用对应的标签来配置通知的类型
                aop:before：前置通知。即在切入点方法执行之前，执行通知Bean中的方法
                    method属性：用于指定通知Bean中的哪个方法是前置通知
                    pointCut：通过切入点表达式，指定对业务层中的哪个切入点方法进行增强
                        切入点表达式的写法：
                            关键字：execution(表达式)
                            表达式：访问修饰符 返回值 包名.包名.包名...类名.方法名(参数列表)
                                标准表达式写法：
                                    public void com.itheima.service.impl.AccountServiceImpl.saveAccount()
                                访问修饰符可以省略，表示任意修饰符，有无修饰符都行
                                    void com.itheima.service.impl.AccountServiceImpl.saveAccount()
                                返回值类型可以使用通配符，表示任意返回值类型
                                    * com.itheima.service.impl.AccountServiceImpl.saveAccount()
                                包名可以使用通配符，表示任意包，有几级包，就需要写几个*.
                                    * *.*.*.*.AccountServiceImpl.saveAccount()
                                包名可以使用*..表示任意包
                                    * *..AccountServiceImpl.saveAccount()
                                类名可以使用通配符，表示任意类
                                    * *..*.saveAccount()
                                方法名可以使用通配符，表示任意方法
                                    * *..*.*()
                                参数列表：
                                    可以直接写数据类型，
                                        基本类型直接写名称
                                            * *..*.*(int)
                                        引用类型则写包名.类名的方式
                                            * *..*.*(java.lang.String)
                                    可以使用通配符，表示任意参数类型
                                        * *..*.*(*)
                                    可以使用..表示有无参数均可，如果有参数则可以是任意类型
                                        * *..*.*(..)
                                全通配写法：表示任意修饰符、任意返回值类型、任意包下的任意类中的任意方法，有无参数类型均可，如果有参数则可以是任意类型
                                    * *..*.*(..)

                                实际开发过程中，切入点表达式的通常写法：
                                    切到业务层下所有实现类下的所有方法，例如：
                                        * com.itheima.service.impl.*.*(..)
     -->

    <!-- 配日志通知Bean Logger类 -->
    <bean id="logger" class="com.itheima.utils.Logger"></bean>

    <!-- 配置Aop -->
    <aop:config>
        <!-- 配置切面 -->
        <aop:aspect id="logAdvice" ref="logger">
            <!-- 配置通知类型，并且建立通知方法和切入点方法的关联 -->
            <aop:before method="printLog" pointcut="execution(* com.itheima.service.impl.*.*(..))"></aop:before>
        </aop:aspect>
    </aop:config>

</beans>