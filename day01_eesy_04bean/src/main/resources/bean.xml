<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd">
    <!-- 配置id和全类名 -->
    <!-- spring对bean的管理细节
            1. 创建bean的三种方式
            2. bean对象的作用范围
            3. bean对象的生命周期
    -->

    <!-- 创建bean的三种方式 -->
    <!-- 第一种：使用默认构造函数（无参构造函数）创建
                如果在bean标签中除了配置id和class属性以外，没有其它的属性配置，
                那么采用的就是默认构造函数创建bean对象，注意，如果类中没有默认构造函数，则对象无法创建
    -->
    <!--<bean id="accountService" class="com.itheima.service.impl.AccountServiceImpl"></bean>-->

    <!-- 第二种：使用普通工厂中的方法创建对象（或者是使用某个类中的方法创建对象），并存入spring容器 -->
    <!-- 先获取这个工厂对象 -->
    <!--<bean id="instanceFactory" class="com.itheima.factory.InstanceFactory"></bean>-->
    <!-- 然后根据这个工厂中的方法，创建对象 -->
    <!--<bean id="accountService" factory-bean="instanceFactory" factory-method="getAccountService"></bean>-->

    <!-- 第三种：使用普通工厂中的静态方法创建对象（或者是使用某个类中的静态方法创建对象），并存入spring容器-->
    <!-- 获取工厂类以后，再根据工厂中的静态方法，创建对象  （类是可以直接调用静态方法的）-->
    <!--<bean id="accountService" class="com.itheima.factory.StaticFactory" factory-method="getAccountService"></bean>-->

    <!-- bean对象的作用范围
            使用scope标签指定作用范围，取值有：
                singleton       单例（也是scope的默认值）
                prototype       多例
                request         作用于web应用的请求范围
                session         作用于web应用的会话范围
                global-session  作用于集群环境的会话范围（全局会话范围），当不是集群环境时，它和session的作用范围一样
    -->

    <bean id="accountService" class="com.itheima.service.impl.AccountServiceImpl"
          scope="singleton" init-method="init" destroy-method="destroy"></bean>
    <!-- bean对象的生命周期
            单例对象：
                出生      当容器创建时，对象出生
                活着      只要容器还在，对象一直活着
                死亡      容器销毁，对象消亡
                总结：    单例对象的生命周期和容器相同
            多例对象：
                出生      当使用对象（调用getBean方法时）时，对象出生
                活着      只要对象在使用过程中，就一直活着
                死亡      当对象长时间不使用时，且没有别的对象引用时，由java的垃圾回收器回收

    -->

</beans>

